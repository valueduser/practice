---
import Layout from '@layouts/Layout.astro'
import {
  getActivitiesForWorkout,
  getActivity,
  processImage,
} from '@data/pocketbase'
import Timer from '@components/timer/Timer.astro'
import NavigationButton from '@components/NavigationButton.astro'
import type { WorkoutActivity } from '@src/types/workoutActivityType'
import { getUsername } from '@lib/auth'
import '../../../../styles/styles.css'

const { workout_id, workout_activity_id } = Astro.params

if (!workout_id || !workout_activity_id) {
  console.error(
    `Invalid parameters: workout_id=${workout_id}, workout_activity_id=${workout_activity_id}`
  )
  return Astro.redirect('/dashboard')
}

let allWorkoutActivites: WorkoutActivity[] = []
try {
  allWorkoutActivites = await getActivitiesForWorkout(
    Astro.locals.pb,
    workout_id
  )
} catch (e) {
  console.error(e)
  return Astro.redirect('/dashboard')
}

const activity = allWorkoutActivites.find(
  (act) => act.workout_activity_id === workout_activity_id
)
if (!activity) {
  console.error(
    `Activity with ID ${workout_activity_id} not found in workout ${workout_id}`
  )
  return Astro.redirect('/dashboard')
}

const previousActivity =
  allWorkoutActivites
    .filter((act) => act.order < activity.order)
    .sort((a, b) => b.order - a.order)[0] || null

const prevId = previousActivity ? previousActivity.workout_activity_id : null
const prevDisplayName = previousActivity
  ? previousActivity.name +
    (previousActivity.side ? ' ' + previousActivity.side : '')
  : 'Back to workout'

const nextActivity =
  allWorkoutActivites
    .filter((act) => act.order > activity.order)
    .sort((a, b) => a.order - b.order)[0] || null

const nextId = nextActivity ? nextActivity.workout_activity_id : null
const nextDisplayName = nextActivity
  ? nextActivity.name + (nextActivity.side ? ' ' + nextActivity.side : '')
  : 'Done!'

const otherThing = await getActivity(Astro.locals.pb, activity.id)
const image = processImage(Astro.locals.pb, otherThing)

let userName: string | null = null
try {
  userName = await getUsername(Astro.request)
} catch (err) {
  console.error('Failed to get username:', err)
  userName = null
}
---

<Layout title={activity.name} userName={userName}>
  <div class="page-container">
    <div class="page-header">
      <a href={`/workout/${workout_id}`} class="back-button">
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M15 19l-7-7 7-7"></path>
        </svg>
      </a>
      <h1 class="page-title">{activity.name}</h1>
    </div>

    <div class="max-w-2xl mx-auto">
      <div class="content-card">
        <div class="grid grid-cols-2 gap-4 text-sm">
          <div class="flex justify-between">
            <span class="text-gray-400">Reps:</span>
            <span class="font-semibold">{activity.reps}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-400">Sets:</span>
            <span class="font-semibold">{activity.sets}</span>
          </div>
          {
            activity.side && (
              <div class="flex justify-between">
                <span class="text-gray-400">Side:</span>
                <span class="font-semibold capitalize">{activity.side}</span>
              </div>
            )
          }
          {
            activity.weight > 0 && (
              <div class="flex justify-between">
                <span class="text-gray-400">Weight:</span>
                <span class="font-semibold">
                  {activity.weight} {activity.weight_units}
                </span>
              </div>
            )
          }
        </div>
      </div>

      {
        activity.image && (
          <div class="content-card">
            <img
              src={image.url}
              alt={`${activity.name}`}
              class="w-full h-auto rounded-lg"
              style="max-height: 400px; object-fit: contain;"
            />
          </div>
        )
      }

      {
        activity.instructions && (
          <div class="content-card">
            <h3 class="text-lg font-semibold mb-2">Instructions</h3>
            <p class="text-gray-300 leading-relaxed">{activity.instructions}</p>
          </div>
        )
      }

      {
        activity.duration > 0 && (
          <div class="content-card">
            <Timer initialDuration={activity.duration} />
          </div>
        )
      }

      <div class="flex justify-between items-center mt-6">
        <div class="flex items-center">
          <NavigationButton
            direction="back"
            href={prevId
              ? `/workout/${workout_id}/activity/${prevId}`
              : `/workout/${workout_id}`}
          />
          <span class="ml-2 text-sm text-gray-400">
            {prevId ? prevDisplayName : 'Back to workout'}
          </span>
        </div>

        <div class="flex items-center">
          <span class="mr-2 text-sm text-gray-400">
            {nextDisplayName}
          </span>
          <NavigationButton
            direction="next"
            href={nextId
              ? `/workout/${workout_id}/activity/${nextId}`
              : `/workout/${workout_id}`}
          />
        </div>
      </div>
    </div>
  </div>
</Layout>
