---
import Layout from '@layouts/Layout.astro'
import { getActivitiesForWorkout } from '@data/pocketbase'
import Timer from '@components/timer/Timer.astro'
import NavigationButton from '@components/NavigationButton.astro'
import type { WorkoutActivity } from '@src/types/workoutActivityType'

const { workout_id, activity_id } = Astro.params

if (!workout_id || !activity_id) {
  return Astro.redirect('/dashboard')
}

const allWorkoutActivites = await getActivitiesForWorkout(
  Astro.locals.pb,
  workout_id
)
let activity: WorkoutActivity | undefined
try {
  activity = allWorkoutActivites.find((act) => act.id === activity_id)

  if (!activity) {
    throw new Error(`Activity ${activity_id} not found`)
  }
} catch (e) {
  console.error(e)
  return Astro.redirect('/dashboard')
}

let previousActivity, prevId, prevDisplayName
try {
  previousActivity = allWorkoutActivites.find(
    (act) => act.order === activity.order - 1
  )
  prevId = previousActivity ? previousActivity.id : -1
  prevDisplayName = previousActivity
    ? previousActivity.name +
      (previousActivity.side ? ' ' + previousActivity.side : '')
    : 'nothingness'
} catch (e) {
  console.error(e)
  previousActivity = null
  prevId = -1
}

let nextActivity, nextId, nextDisplayName
try {
  nextActivity = allWorkoutActivites.find(
    (act) => act.order === activity.order + 1
  )
  nextId = nextActivity ? nextActivity.id : -1
  nextDisplayName = nextActivity
    ? nextActivity.name + (nextActivity.side ? ' ' + nextActivity.side : '')
    : 'Done!'
} catch (e) {
  console.error(e)
  nextActivity = null
  nextId = -1
}
---

<Layout title={activity.name}>
  <div class="min-h-screen bg-black text-white p-4">
    <NavigationButton direction="back" href={`/workout/${workout_id}`} />
    <h1 class="text-2xl font-bold mb-2">
      {activity.name}
    </h1>
    {
      activity.image && (
        <div class="my-4 flex justify-center">
          <img
            src={activity.image}
            alt={`${activity.name}`}
            class="max-w-full h-auto rounded-lg"
            style="max-height: 400px; object-fit: contain;"
          />
        </div>
      )
    }
    <div>reps: {activity.reps}</div>
    <div>sets: {activity.sets}</div>
    {activity.side && <div>side: {activity.side}</div>}
    {
      activity.weight > 0 && (
        <div>
          weight: {activity.weight} {activity.weight_units}
        </div>
      )
    }
    <div>{activity.instructions}</div>
    {activity.duration > 0 && <Timer initialDuration={activity.duration} />}

    <NavigationButton
      direction="back"
      href={prevId
        ? `/workout/${workout_id}/activity/${prevId}`
        : `/workout/${workout_id}`}
    />

    {
      nextId !== null && (
        <NavigationButton
          direction="next"
          href={
            nextId
              ? `/workout/${workout_id}/activity/${nextId}`
              : `/workout/${workout_id}`
          }
        />
      )
    }
    <div>next up: {nextDisplayName}</div>
    <div>prev: {prevDisplayName}</div>
  </div>
</Layout>
